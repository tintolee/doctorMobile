{"version":3,"sources":["ScrollViewGesture.tsx"],"names":["React","StyleSheet","PanGestureHandler","Animated","cancelAnimation","runOnJS","useAnimatedGestureHandler","useAnimatedReaction","useDerivedValue","useSharedValue","withDecay","Easing","CTX","dealWithAnimation","IScrollViewGesture","props","vertical","data","pagingEnabled","snapEnabled","panGestureHandlerProps","loop","infinite","scrollAnimationDuration","withAnimation","enabled","useContext","translation","size","onScrollBegin","onScrollEnd","onTouchBegin","onTouchEnd","maxPage","length","isHorizontal","touching","scrollEndTranslation","scrollEndVelocity","_withSpring","useCallback","toValue","onFinished","defaultWithAnimation","type","config","duration","easing","easeOutQuart","isFinished","endWithSpring","origin","value","velocity","nextPage","Math","round","deceleration","direction","abs","computed","ceil","floor","page","finalPage","min","max","onFinish","activeDecay","resetBoundary","panGestureEventHandler","onStart","_","ctx","validStart","panOffset","onActive","e","translationX","translationY","panTranslation","boundary","fixed","dynamic","onEnd","velocityX","velocityY","directionStyle","useMemo","styles","contentHorizontal","contentVertical","container","width","height","children","ScrollViewGesture","create","flex","overflow","flexDirection"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { StyleProp, StyleSheet, ViewStyle } from 'react-native';\nimport {\n    PanGestureHandler,\n    PanGestureHandlerGestureEvent,\n} from 'react-native-gesture-handler';\nimport Animated, {\n    cancelAnimation,\n    runOnJS,\n    useAnimatedGestureHandler,\n    useAnimatedReaction,\n    useDerivedValue,\n    useSharedValue,\n    withDecay,\n} from 'react-native-reanimated';\nimport { Easing } from './constants';\nimport { CTX } from './store';\nimport type { WithTimingAnimation } from './types';\nimport { dealWithAnimation } from './utils/dealWithAnimation';\n\ntype GestureContext = {\n    validStart: boolean;\n    panOffset: number;\n    max: number;\n};\n\ninterface Props {\n    size: number;\n    infinite?: boolean;\n    onScrollBegin?: () => void;\n    onScrollEnd?: () => void;\n    onTouchBegin?: () => void;\n    onTouchEnd?: () => void;\n    style?: StyleProp<ViewStyle>;\n    translation: Animated.SharedValue<number>;\n}\n\nconst IScrollViewGesture: React.FC<Props> = (props) => {\n    const {\n        props: {\n            vertical,\n            data,\n            pagingEnabled,\n            snapEnabled,\n            panGestureHandlerProps,\n            loop: infinite,\n            scrollAnimationDuration,\n            withAnimation,\n            enabled,\n        },\n    } = React.useContext(CTX);\n\n    const {\n        translation,\n        size,\n        onScrollBegin,\n        onScrollEnd,\n        onTouchBegin,\n        onTouchEnd,\n    } = props;\n\n    const maxPage = data.length;\n    const isHorizontal = useDerivedValue(() => !vertical, [vertical]);\n    const touching = useSharedValue(false);\n    const scrollEndTranslation = useSharedValue(0);\n    const scrollEndVelocity = useSharedValue(0);\n\n    const _withSpring = React.useCallback(\n        (toValue: number, onFinished?: () => void) => {\n            'worklet';\n            const defaultWithAnimation: WithTimingAnimation = {\n                type: 'timing',\n                config: {\n                    duration: scrollAnimationDuration + 100,\n                    easing: Easing.easeOutQuart,\n                },\n            };\n\n            return dealWithAnimation(withAnimation ?? defaultWithAnimation)(\n                toValue,\n                (isFinished: boolean) => {\n                    'worklet';\n                    if (isFinished) {\n                        onFinished && runOnJS(onFinished)();\n                    }\n                }\n            );\n        },\n        [scrollAnimationDuration, withAnimation]\n    );\n\n    const endWithSpring = React.useCallback(\n        (onFinished?: () => void) => {\n            'worklet';\n            const origin = translation.value;\n            const velocity = scrollEndVelocity.value;\n            if (!pagingEnabled) {\n                /**\n                 * If enabled, releasing the touch will scroll to the nearest item.\n                 * valid when pagingEnabled=false\n                 */\n                if (snapEnabled) {\n                    const nextPage =\n                        Math.round((origin + velocity * 0.4) / size) * size;\n\n                    translation.value = _withSpring(nextPage, onFinished);\n                    return;\n                }\n                translation.value = withDecay({\n                    velocity,\n                    deceleration: 0.999,\n                });\n                return;\n            }\n\n            const direction =\n                -scrollEndTranslation.value /\n                Math.abs(scrollEndTranslation.value);\n            const computed = direction < 0 ? Math.ceil : Math.floor;\n            const page = computed(-translation.value / size);\n            let finalPage = page + direction;\n\n            if (!infinite) {\n                finalPage = Math.min(maxPage - 1, Math.max(0, finalPage));\n            }\n\n            translation.value = _withSpring(-finalPage * size, onFinished);\n        },\n        [\n            translation,\n            scrollEndVelocity.value,\n            pagingEnabled,\n            size,\n            scrollEndTranslation.value,\n            infinite,\n            _withSpring,\n            snapEnabled,\n            maxPage,\n        ]\n    );\n\n    const onFinish = React.useCallback(\n        (isFinished: boolean) => {\n            'worklet';\n            if (isFinished) {\n                touching.value = false;\n                onScrollEnd && runOnJS(onScrollEnd)();\n            }\n        },\n        [onScrollEnd, touching]\n    );\n\n    const activeDecay = React.useCallback(() => {\n        'worklet';\n        touching.value = true;\n        translation.value = withDecay(\n            { velocity: scrollEndVelocity.value },\n            (isFinished) => onFinish(isFinished as boolean)\n        );\n    }, [onFinish, scrollEndVelocity.value, touching, translation]);\n\n    const resetBoundary = React.useCallback(() => {\n        'worklet';\n        if (touching.value) {\n            return;\n        }\n\n        if (translation.value > 0) {\n            if (scrollEndTranslation.value < 0) {\n                activeDecay();\n                return;\n            }\n            if (!infinite) {\n                translation.value = _withSpring(0);\n                return;\n            }\n        }\n\n        if (translation.value < -((maxPage - 1) * size)) {\n            if (scrollEndTranslation.value > 0) {\n                activeDecay();\n                return;\n            }\n            if (!infinite) {\n                translation.value = _withSpring(-((maxPage - 1) * size));\n                return;\n            }\n        }\n    }, [\n        touching.value,\n        translation,\n        maxPage,\n        size,\n        scrollEndTranslation.value,\n        infinite,\n        activeDecay,\n        _withSpring,\n    ]);\n\n    useAnimatedReaction(\n        () => translation.value,\n        () => {\n            if (!pagingEnabled) {\n                resetBoundary();\n            }\n        },\n        [pagingEnabled, resetBoundary]\n    );\n\n    const panGestureEventHandler = useAnimatedGestureHandler<\n        PanGestureHandlerGestureEvent,\n        GestureContext\n    >(\n        {\n            onStart: (_, ctx) => {\n                touching.value = true;\n                ctx.validStart = true;\n                onScrollBegin && runOnJS(onScrollBegin)();\n                ctx.max = (maxPage - 1) * size;\n                ctx.panOffset = translation.value;\n            },\n            onActive: (e, ctx) => {\n                if (ctx.validStart) {\n                    ctx.validStart = false;\n                    cancelAnimation(translation);\n                }\n                touching.value = true;\n                const { translationX, translationY } = e;\n                let panTranslation = isHorizontal.value\n                    ? translationX\n                    : translationY;\n\n                if (\n                    !infinite &&\n                    (translation.value > 0 || translation.value < -ctx.max)\n                ) {\n                    const boundary = translation.value > 0 ? 0 : -ctx.max;\n                    const fixed = boundary - ctx.panOffset;\n                    const dynamic = panTranslation - fixed;\n                    translation.value = boundary + dynamic * 0.5;\n                    return;\n                }\n\n                translation.value = ctx.panOffset + panTranslation;\n            },\n            onEnd: (e) => {\n                const { velocityX, velocityY, translationX, translationY } = e;\n                scrollEndVelocity.value = isHorizontal.value\n                    ? velocityX\n                    : velocityY;\n                scrollEndTranslation.value = isHorizontal.value\n                    ? translationX\n                    : translationY;\n\n                endWithSpring(onScrollEnd);\n\n                if (!infinite) {\n                    touching.value = false;\n                }\n            },\n        },\n        [\n            pagingEnabled,\n            isHorizontal.value,\n            infinite,\n            maxPage,\n            size,\n            snapEnabled,\n            onScrollBegin,\n            onScrollEnd,\n        ]\n    );\n\n    const directionStyle = React.useMemo(() => {\n        return vertical ? styles.contentHorizontal : styles.contentVertical;\n    }, [vertical]);\n\n    return (\n        <Animated.View\n            style={[\n                styles.container,\n                directionStyle,\n                { width: '100%', height: '100%' },\n            ]}\n            onTouchStart={onTouchBegin}\n            onTouchEnd={onTouchEnd}\n        >\n            <PanGestureHandler\n                {...panGestureHandlerProps}\n                enabled={enabled}\n                onGestureEvent={panGestureEventHandler}\n            >\n                {props.children}\n            </PanGestureHandler>\n        </Animated.View>\n    );\n};\n\nexport const ScrollViewGesture = IScrollViewGesture;\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        overflow: 'hidden',\n    },\n    contentVertical: {\n        flexDirection: 'column',\n    },\n    contentHorizontal: {\n        flexDirection: 'row',\n    },\n});\n"]}